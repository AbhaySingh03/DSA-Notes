//Date - 02/02/2023

//Leetcode
//24. Swap Nodes in Pairs

// Q) Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes 
//(i.e., only nodes themselves may be changed.)



class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode dummy = new ListNode(-1, head);
        ListNode dummyHead = dummy;
        ListNode a = head, b = head.next, c = head.next.next;

        while (true) {
            dummyHead.next = b;
            b.next = a;
            a.next = c;

            if (c == null || c.next == null) {
                break;
            }

            dummyHead = a;
            a = a.next;
            b = b.next.next.next;
            c = c.next.next;
        }

        return dummy.next;
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// TC: O(n), SC: O(1)
