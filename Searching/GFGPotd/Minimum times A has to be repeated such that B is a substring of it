// Date - 31/01/2023
//Q)Minimum times A has to be repeated such that B is a substring of it

//Given two strings A and B. Find minimum number of times A has to be repeated such that B is a Substring of it. If B can never be a substring then return -1.
//Example 1:
//Input:
//A = "abcd"
//B = "cdabcdab"
//Output:
//3
//Explanation:
//Repeating A three times (abcdabcdabcd),
//B is a substring of it. B is not a substring
//of A when it is repeated less than 3 times.
//Example 2:
//Input:
//A = "ab"
//B = "cab"
//Output :
//-1
//Explanation:
//No matter how many times we repeat A, we can't
//get a string such that B is a substring of it.

class Solution {
    static int minRepeats(String A, String B) {
         StringBuilder sb = new StringBuilder(A);
        
        int count = 1;
        
        while(sb.length() < B.length()){
            sb.append(A);
            count++;
        }
        if(sb.indexOf(B) >= 0) return count;    //The indexOf() method of Java StringBuilder class is used to return
                                                // the index of the first occurrence of the specified substring.
        
        if(sb.append(A).indexOf(B) >= 0) return count+1;
        return -1;
    }
}

// Expected Time Complexity: O(|A| * |B|)
// Expected Auxiliary Space: O(|B|)
